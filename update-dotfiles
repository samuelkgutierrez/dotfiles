#!/bin/bash

# 
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This code inspired by Todd Werth's dotfile link program

# author: Samuel K. Gutierrez

APP_NAME="update-dotfile"
BVERBOSE=1

################################################################################
# environment sanity checks
################################################################################
function sanity()
{
    local dist_dir="$1"

    if [[ -z "$dist_dir" ]]; then
        echo "sanity: bad parameter -- cannot continue."
        return 1
    fi
    if [ -z "$PS1" ]; then
        echo "please source $APP_NAME, don't run it."
        echo "EXAMPLE:"
        echo "  source ./$APP_NAME"
        return 1
    fi
    if [[ ! -e "$dist_dir/.magic-cookie" ]]; then
        echo "sanity: invalid distribution path detected -- cannot continue."
        return 1
    fi
    return 0
}

################################################################################
# returns the directory of the dotfile distribution
#   i.e., the path to this script and dotfiles
################################################################################
function get_dotfile_dir()
{
    local dist_path="${BASH_SOURCE[0]}"

    if [[ -h "${dist_path}" ]]; then
        while [[ -h "${dist_path}" ]]; do
            dist_path=`readlink "${dist_path}"`
        done
    fi
    pushd . > /dev/null
    cd `dirname ${dist_path}` > /dev/null
    dist_path="$PWD"
    popd  > /dev/null

    echo "$dist_path"
}

################################################################################
#  
################################################################################
function build_dotfile_list()
{
    local dist_dir="$1"
    local list=`ls -1 $dist_dir/dotfiles/`
    echo "$list"
}

################################################################################
# echoes input if verbose mode is enabled
################################################################################
function status_update()
{
    local outstr="$1"

    if [[ 1 == $BVERBOSE ]]; then
        echo "$outstr"
    fi
}

################################################################################
# thin wrapper around ln -s
################################################################################
function update_link()
{
    local file="$1"
    local link="$2"

    status_update "#+> updating links..."

    if [[ -z "$file" || -z "$link" ]]; then
        echo "update_link: bad parameter -- cannot continue."
        return 1
    fi
    if [[ ! -e "$file" ]]; then
        echo "update_link: cannot update link -- $file does not exist."
        return 1
    fi
    if [[ -e "$link" ]]; then
        status_update "#++> removing $link"
        rm -f "$link"
        if [[ 0 != $? ]]; then
            echo "update_link: rm -f $link failed -- cannot continue."
            return 1
        fi
    fi
    status_update "#+++> creating symbolic link: $file -> $link"
    ln -s "$file" "$link"
}

################################################################################
################################################################################
# main
################################################################################
################################################################################
function main()
{
    local dist_path=$(get_dotfile_dir)
    local dot_

    sanity "$dist_path"
    if [[ 0 == $? ]]; then
        dot_files=`build_dotfile_list "$dist_path"`
        for dot_file in `echo "$dot_files"`; do
            update_link "$dist_path/dotfiles/$dot_file" ~/."$dot_file"
        done
    fi
}

main
