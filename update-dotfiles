#!/bin/bash

# 
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This code inspired by Todd Werth's dotfile link program

# author: Samuel K. Gutierrez

APP_NAME="update-dotfile"
BVERBOSE=0

# FIXME add optarg to change this
#dot_update_action="copy"
dot_update_action="link"

################################################################################
# environment sanity checks
################################################################################
function sanity()
{
    local dist_dir="$1"

    if [[ -z "$dist_dir" ]]; then
        echo "sanity: bad parameter -- cannot continue."
        return 1
    fi
    if [[ -z "$PS1" ]]; then
        echo "please source $APP_NAME, don't run it."
        echo "EXAMPLE:"
        echo "  source ./$APP_NAME"
        return 1
    fi
    if [[ ! -e "$dist_dir/.magic-cookie" ]]; then
        echo "sanity: invalid distribution path detected -- cannot continue."
        return 1
    fi
    return 0
}

################################################################################
# returns the directory of the dotfile distribution
#   i.e., the path to this script and dotfiles
################################################################################
function get_dotfile_dir()
{
    local dist_path="${BASH_SOURCE[0]}"

    if [[ -h "${dist_path}" ]]; then
        while [[ -h "${dist_path}" ]]; do
            dist_path=`readlink "${dist_path}"`
        done
    fi
    pushd . > /dev/null
    cd `dirname ${dist_path}` > /dev/null
    dist_path="$PWD"
    popd  > /dev/null

    echo "$dist_path"
}

################################################################################
#  
################################################################################
function build_dotfile_list()
{
    local dist_dir="$1"
    local list=`ls -1 $dist_dir/dotfiles/`
    echo "$list"
}

################################################################################
# echoes input if verbose mode is enabled
################################################################################
function status_update()
{
    local outstr="$1"

    if [[ 1 == $BVERBOSE ]]; then
        echo "$outstr"
    fi
}

################################################################################
# thin wrapper around ln -s or cp -r
################################################################################
function update_dot()
{
    local src="$1"
    local dest="$2"

    status_update "#+> updating links..."

    if [[ -z "$src" || -z "$dest" ]]; then
        "update_dot: bad parameter -- cannot continue."
        return 1
    fi
    if [[ ! -e "$src" ]]; then
        echo "update_dot: cannot update link -- $src does not exist."
        return 1
    fi
    if [[ -e "$dest" ]]; then
        status_update "#++> removing $dest"
        rm -rf "$dest"
        if [[ 0 != $? ]]; then
            echo "update_dot: rm -rf $dest failed -- cannot continue."
            return 1
        fi
    fi
    if [[ "$dot_update_action" == "link" ]]; then
        status_update "#+++> creating symbolic link: $src -> $dest"
        ln -s "$src" "$dest"
        return $?
    elif [[ "$dot_update_action" == "copy" ]]; then
        status_update "#+++> copying: $src -> $dest"
        cp -r "$src" "$dest"
        return $?
    else
        echo "update_dot: invalid update action -- cannot continue."
        return 1
    fi
}

################################################################################
################################################################################
# main
################################################################################
################################################################################
function main()
{
    local dist_path=$(get_dotfile_dir)

    sanity "$dist_path"
    if [[ 0 == $? ]]; then
        dot_files=`build_dotfile_list "$dist_path"`
        for dot_file in `echo "$dot_files"`; do
            update_dot "$dist_path/dotfiles/$dot_file" ~/."$dot_file"
            if [[ 0 != $? ]]; then
                echo "update_dot failure!"
                return 1
            fi
        done
    fi
    return 0
}

main
return $?
